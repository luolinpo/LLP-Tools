using Common;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using static Common.MapHelper;

namespace Tools
{
    public partial class PointInProvince : Form
    {
        public PointInProvince()
        {
            InitializeComponent();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            Stopwatch stopwatch = new Stopwatch();
            stopwatch.Start();
            //监控的代码段

            string cd = "103.256586, 30.253564; 103.245753, 30.245605; 103.22913, 30.220449; 103.220973, 30.216114; 103.216916, 30.221851; 103.22512, 30.240426; 103.22003, 30.244797; 103.210323, 30.23903; 103.17973, 30.241226; 103.1665, 30.229643; 103.160107, 30.217109; 103.143615, 30.209984; 103.122252, 30.220281; 103.097526, 30.222398; 103.076628, 30.237958; 103.069337, 30.264395; 103.069079, 30.310264; 103.089575, 30.334976; 103.120319, 30.35633; 103.129999, 30.366628; 103.123968, 30.378804; 103.123503, 30.390968; 103.127977, 30.410223; 103.125943, 30.435921; 103.128393, 30.448073; 103.140535, 30.469431; 103.163741, 30.491349; 103.190658, 30.524143; 103.196883, 30.546978; 103.191881, 30.56179; 103.183901, 30.566192; 103.164885, 30.567542; 103.160615, 30.570658; 103.156597, 30.590999; 103.132717, 30.591697; 103.133507, 30.610058; 103.110875, 30.606817; 103.104095, 30.610282; 103.123546, 30.640439; 103.12304, 30.663036; 103.131417, 30.678869; 103.130217, 30.693178; 103.12298, 30.704467; 103.118204, 30.724058; 103.109209, 30.735357; 103.092554, 30.743393; 103.079927, 30.757017; 103.060341, 30.768667; 103.031068, 30.800206; 103.047407, 30.809567; 103.092182, 30.818668; 103.098062, 30.818014; 103.119983, 30.800995; 103.125056, 30.800746; 103.16871, 30.846201; 103.185534, 30.853518; 103.234054, 30.844035; 103.270381, 30.841335; 103.288819, 30.833243; 103.304651, 30.820377; 103.317699, 30.818623; 103.331483, 30.824095; 103.36618, 30.856579; 103.404883, 30.868773; 103.449423, 30.889172; 103.460385, 30.90455; 103.461087, 30.93093; 103.466557, 30.941685; 103.485308, 30.9569; 103.516992, 30.975565; 103.52658, 30.993408; 103.527709, 31.008574; 103.51055, 31.044773; 103.529441, 31.082943; 103.543497, 31.126625; 103.586526, 31.202216; 103.584852, 31.297181; 103.577343, 31.325301; 103.58237, 31.341677; 103.593367, 31.352868; 103.605395, 31.358052; 103.678042, 31.365349; 103.706642, 31.398513; 103.744436, 31.409615; 103.756854, 31.424887; 103.78712, 31.436079; 103.802203, 31.448921; 103.815605, 31.444837; 103.826186, 31.429179; 103.833714, 31.426577; 103.881573, 31.429761; 103.898084, 31.427807; 103.901306, 31.424897; 103.914372, 31.393049; 103.923032, 31.381237; 103.924753, 31.367494; 103.919816, 31.351164; 103.900014, 31.326487; 103.897992, 31.313137; 103.905557, 31.298618; 103.933609, 31.265468; 103.936492, 31.24323; 103.944924, 31.229436; 103.964136, 31.21208; 103.981882, 31.208602; 103.991568, 31.20226; 104.017362, 31.17733; 104.021401, 31.139124; 104.038204, 31.102303; 104.061883, 31.080613; 104.082355, 31.066899; 104.102015, 31.047066; 104.119653, 31.037345; 104.150053, 31.011978; 104.169284, 30.991717; 104.172832, 30.976108; 104.17022, 30.96303; 104.14857, 30.919761; 104.153473, 30.915864; 104.17421, 30.915983; 104.1964, 30.907033; 104.246142, 30.910212; 104.351511, 30.90389; 104.363734, 30.910021; 104.366287, 30.931171; 104.375824, 30.940078; 104.420788, 30.9439; 104.445373, 30.942187; 104.468002, 30.948446; 104.510893, 30.940904; 104.531602, 30.928575; 104.535073, 30.921899; 104.531672, 30.902885; 104.534874, 30.897357; 104.57787, 30.869231; 104.601266, 30.859428; 104.631443, 30.854567; 104.677441, 30.837518; 104.707931, 30.819157; 104.717542, 30.784582; 104.738771, 30.775737; 104.759449, 30.742271; 104.768215, 30.734027; 104.792728, 30.728012; 104.799653, 30.723298; 104.802547, 30.695937; 104.820119, 30.678725; 104.827013, 30.648413; 104.833902, 30.641536; 104.847634, 30.638437; 104.84789, 30.625822; 104.823504, 30.602075; 104.826674, 30.594032; 104.833548, 30.590592; 104.852308, 30.596964; 104.86471, 30.596904; 104.877349, 30.569718; 104.900154, 30.555406; 104.896954, 30.531817; 104.890025, 30.519945; 104.880737, 30.51399; 104.881797, 30.507492; 104.877848, 30.501427; 104.880807, 30.489709; 104.880566, 30.442425; 104.875414, 30.432287; 104.879599, 30.424764; 104.885696, 30.427161; 104.884934, 30.410976; 104.879528, 30.394525; 104.8839, 30.391454; 104.886601, 30.399921; 104.90307, 30.384308; 104.901391, 30.382139; 104.896423, 30.384098; 104.894935, 30.379649; 104.8896, 30.377748; 104.885979, 30.366745; 104.867347, 30.371149; 104.857444, 30.350332; 104.84478, 30.366713; 104.839231, 30.366198; 104.847741, 30.350846; 104.855582, 30.345335; 104.854295, 30.31254; 104.838903, 30.306855; 104.831852, 30.309153; 104.827454, 30.305815; 104.828214, 30.298881; 104.816733, 30.297387; 104.812752, 30.302356; 104.802294, 30.284623; 104.797782, 30.287847; 104.793013, 30.300662; 104.780052, 30.307639; 104.759613, 30.307678; 104.753564, 30.297808; 104.74456, 30.295965; 104.733387, 30.299741; 104.732746, 30.309314; 104.72889, 30.31403; 104.708781, 30.306689; 104.695631, 30.280214; 104.685852, 30.285464; 104.668908, 30.282417; 104.656225, 30.29214; 104.652568, 30.291748; 104.642818, 30.277151; 104.658843, 30.256029; 104.657967, 30.247118; 104.626819, 30.244929; 104.612489, 30.251673; 104.605606, 30.250191; 104.601104, 30.244585; 104.607543, 30.24024; 104.605547, 30.225986; 104.578259, 30.21149; 104.571829, 30.200418; 104.547299, 30.190116; 104.535323, 30.200709; 104.526257, 30.190515; 104.512442, 30.188316; 104.505975, 30.197749; 104.491212, 30.189696; 104.488626, 30.175551; 104.493935, 30.164877; 104.488423, 30.160997; 104.480824, 30.166684; 104.477287, 30.16523; 104.471127, 30.159249; 104.47118, 30.15203; 104.46147, 30.151096; 104.46165, 30.144609; 104.45646, 30.143607; 104.454351, 30.139614; 104.463334, 30.12599; 104.440724, 30.115083; 104.454614, 30.110723; 104.455888, 30.106863; 104.450537, 30.100776; 104.440164, 30.096427; 104.429321, 30.099666; 104.412954, 30.132757; 104.403012, 30.142925; 104.39605, 30.161268; 104.369553, 30.176159; 104.351579, 30.208601; 104.315724, 30.21067; 104.298224, 30.218325; 104.276462, 30.243669; 104.253293, 30.246221; 104.249116, 30.249388; 104.244467, 30.261046; 104.249591, 30.276682; 104.229921, 30.292191; 104.235106, 30.318087; 104.199989, 30.332525; 104.198123, 30.338712; 104.188377, 30.327146; 104.175852, 30.296992; 104.171365, 30.295172; 104.156513, 30.263909; 104.140584, 30.240712; 104.130116, 30.231555; 104.114603, 30.227183; 104.101603, 30.236968; 104.097253, 30.256702; 104.09381, 30.255339; 104.07171, 30.26195; 104.050065, 30.278085; 104.009319, 30.278705; 103.992047, 30.287317; 103.980277, 30.298687; 103.965687, 30.323716; 103.951524, 30.329559; 103.927126, 30.356915; 103.923675, 30.357805; 103.918488, 30.34421; 103.913227, 30.34092; 103.896647, 30.338516; 103.889247, 30.341336; 103.873318, 30.357135; 103.854565, 30.354556; 103.820062, 30.357855; 103.800773, 30.355287; 103.791594, 30.350109; 103.774997, 30.323834; 103.748659, 30.319918; 103.700536, 30.29687; 103.702278, 30.259309; 103.690315, 30.252518; 103.678641, 30.251573; 103.668989, 30.254729; 103.665001, 30.250086; 103.657798, 30.230855; 103.657815, 30.204934; 103.65341, 30.198626; 103.637839, 30.198266; 103.601698, 30.208893; 103.581829, 30.206969; 103.571558, 30.20239; 103.54044, 30.166392; 103.512307, 30.149796; 103.499628, 30.12999; 103.486183, 30.128437; 103.462236, 30.13918; 103.4454, 30.134556; 103.444945, 30.128816; 103.464022, 30.122193; 103.470582, 30.105168; 103.46562, 30.099927; 103.453948, 30.104088; 103.441148, 30.114779; 103.420904, 30.114138; 103.399158, 30.107173; 103.387716, 30.114097; 103.364222, 30.165862; 103.366113, 30.18214; 103.378397, 30.214258; 103.378482, 30.227566; 103.371446, 30.237872; 103.32612, 30.247252; 103.316631, 30.263155; 103.308128, 30.267086; 103.282527, 30.267302; 103.256586, 30.253564";
            List<string> pointList = cd.Split(';').ToList();
            List<Vector2D> VectorList = new List<Vector2D>();
            foreach (var item in pointList)
            {
                List<string> VectorPoiny = item.Split(',').ToList();
                Vector2D temp = new Vector2D(double.Parse(VectorPoiny[0]), double.Parse(VectorPoiny[1]));
                VectorList.Add(temp);
            }
            Vector2D tempPoint = new Vector2D(double.Parse(textBox1.Text.Trim()), double.Parse(textBox2.Text.Trim()));
            bool re = MapHelper.PointInPolygon(tempPoint, VectorList);
            stopwatch.Stop();
            Console.WriteLine(stopwatch.ElapsedMilliseconds.ToString());
           

            MessageBox.Show(re?"在成都市内":"不在成都市");
        }
    }
}
